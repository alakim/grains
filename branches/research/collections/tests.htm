<html>
<head>
<title>jColl Unit Tests</title>
<script type="text/javascript" src="../tools/jsUnit.js"></script>
<script type="text/javascript" src="jcoll.js"></script>
<script type="text/javascript">
new JSUnit.Test("Подключение модуля jColl", "Configuration").run = function(){
	this.assert(typeof(jColl), "object");
}

new JSUnit.Test("Iterations", "Browser capabilities").run = function(){
	var o = [1,2,3];
	o.x = 20;
	
	var res = {};
	for(var k in o){
		res[k] = o[k];
	}
	this.assert(
		res,
		{
			0:1,
			1:2,
			2:3,
			x:20
		},
		"Error 1"
	);
}

new JSUnit.Test("Test 1", "Construction").run = function(){with(jColl){
	var coll = [1,2,3];
	this.assert($C(coll).item(), coll, "Error 1");
	this.assert($C($C(coll)).item(), coll, "Error 2");
}}

new JSUnit.Test("Array test", "Collection iterations").run = function(){with(jColl){
	var arr = [1,2,3,4,5];
	
	this.assert(
		$C(arr).map(function(el, i){return el*2;}).item(),
		[2,4,6,8,10],
		"Error 1"
	);
	this.assert(
		$C(arr).filter(function(el, i){return i<2;}).item(),
		[1,2],
		"Error 2"
	);
	this.assert(
		$C(arr).find(function(el, i){return el>3;}).item(),
		4,
		"Error 3"
	);
}}

new JSUnit.Test("Objects test", "Collection iterations").run = function(){with(jColl){
	var obj = {
		x:12,
		y:22,
		z:{a:"abc", b:"def"}
	};
	
	this.assert(
		$C(obj).map(function(el, k){return typeof(el)=="number"?el*2:el;}).item(),
		{
			x:24,
			y:44,
			z:{a:"abc", b:"def"}
		},
		"Error 1"
	);
	
	this.assert(
		$C(obj).filter(function(el, k){return typeof(el)=="number";}).item(),
		{
			x:12,
			y:22
		},
		"Error 2"
	);
	
	this.assert(
		$C(obj).find(function(el, k){return typeof(el)=="number" && el>20;}).item(),
		22,
		"Error 3"
	);
}}

new JSUnit.Test("Ruby style notation", "Collection iterations").run = function(){with(jColl){
	var arr = [1,2,3,4,5];
	
	this.assert(
		$C(arr).map("el|el*2").item(),
		[2,4,6,8,10],
		"Error 1"
	);
	this.assert(
		$C(arr).filter("el|el>3").item(),
		[4,5],
		"Error 2"
	);
	this.assert(
		$C(arr).filter("el,i|i<2").item(),
		[1,2],
		"Error 3"
	);
	this.assert(
		$C(arr).find("el|el>3").item(),
		4,
		"Error 4"
	);
}}

new JSUnit.Test("Test 1", "Path").run = function(){with(jColl){
	var db = {
		organizations:{
			Mosstroi:{name:"Мосстрой"}
		}
	};
	
	this.assert($C(db).path("organizations/Mosstroi/name").item(), "Мосстрой", "Error 1");
}}

new JSUnit.Test("Integer operations", "Complex operations").run = function(){with(jColl){
	var arr = [1,2,3,4,5];
	this.assert(
		$C(arr)
			.map("e|e*2")
			.filter("e|e<7")
			.map("e|e-3")
			.item(),
		[-1,1,3],
		"Error 1"
	);
}}

new JSUnit.Test("Html rendering", "Complex operations").run = function(){with(jColl){
	var persons = [
		{name:"Иванов И.И.", phone:"444-4444"},
		{name:"Петров П.П.", phone:"333-3333"},
		{name:"Сидоров С.С.", phone:"222-2222"}
	];
	this.assert(
		$C(persons)
			.map(function(e,i){e.id = "p"+i;return e;}) // модифицируем каждую запись
			.map("e|e.id+'. '+e.name+': '+e.phone") // формируем массив описаний записей
			.item().join("<br>"), // формируем выходной код
		"p0. Иванов И.И.: 444-4444<br>p1. Петров П.П.: 333-3333<br>p2. Сидоров С.С.: 222-2222",
		"Error 1"
	);
}}

new JSUnit.Test("To List", "Data conversion").run = function(){with(jColl){
	var persons = {
		iiivanov:{fio:"Иванов И.И."},
		pppetrov:{fio:"Петров П.П."},
		sssidorov:{fio:"Сидоров С.С."}
	};
	this.assert(
		$C(persons).toList(function(e, k){e.id = k; return e;}).item(),
		[
			{id:"iiivanov", fio:"Иванов И.И."},
			{id:"pppetrov", fio:"Петров П.П."},
			{id:"sssidorov", fio:"Сидоров С.С."}
		],
		"Error 1"
	);
	this.assert(
		$C(persons).toList(function(e, k){return {id:k, fio:e.fio};}).item(),
		[
			{id:"iiivanov", fio:"Иванов И.И."},
			{id:"pppetrov", fio:"Петров П.П."},
			{id:"sssidorov", fio:"Сидоров С.С."}
		],
		"Error 2"
	);
	this.assert(
		$C(persons).toList("e,k|{id:k, fio:e.fio}").item(),
		[
			{id:"iiivanov", fio:"Иванов И.И."},
			{id:"pppetrov", fio:"Петров П.П."},
			{id:"sssidorov", fio:"Сидоров С.С."}
		],
		"Error 3"
	);

	this.assert(
		$C([1,2,3]).toList("e|e").item(),
		[1,2,3],
		"Error 4"
	);
}}

new JSUnit.Test("To Dictionary", "Data conversion").run = function(){with(jColl){
	var persons = [
		{id:"iiivanov", fio:"Иванов И.И."},
		{id:"pppetrov", fio:"Петров П.П."},
		{id:"sssidorov", fio:"Сидоров С.С."}
	];
	
	this.assert(
		$C(persons).toDict(function(e){return e.id;}, function(e){return {fio:e.fio};}).item(),
		{
			iiivanov:{fio:"Иванов И.И."},
			pppetrov:{fio:"Петров П.П."},
			sssidorov:{fio:"Сидоров С.С."}
		}, 
		"Error 1"
	);
	this.assert(
		$C(persons).toDict("e|e.id", "e|{fio:e.fio}").item(),
		{
			iiivanov:{fio:"Иванов И.И."},
			pppetrov:{fio:"Петров П.П."},
			sssidorov:{fio:"Сидоров С.С."}
		}, 
		"Error 2"
	);
	
	this.assert(
		$C({x:1, y:2}).toDict("e|e.x", "e|e.y").item(),
		{},
		"Error 3"
	);

}}

new JSUnit.Test("Select 1", "Data conversion").run = function(){with(jColl){
	var db = {
		organizations:{
			MosBrick:{name:"ОАО Московский кирпич", address:"112332, Москва, Силикатный пр-д, д.2а",
				workers:["iiivanov", "pppetrov"]
			},
			Nauka:{name:"Издательский дом \"Строитель\"", address:"113235, Москва, Ленинский пр-т, д.99",
				workers:["sssidorov", "pppetrov"]
			}
		},
		persons:{
			iiivanov:{fio:"Иванов И.И."},
			pppetrov:{fio:"Петров П.П."},
			sssidorov:{fio:"Сидоров С.С."}
		}
	};
	
	this.assert(
		$C(db.organizations.MosBrick.workers).map(function(w){return db.persons[w];}).item(), 
		[{fio:"Иванов И.И."}, {fio:"Петров П.П."}],
		"Error 1"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers").item(),
		["iiivanov", "pppetrov"],
		"Error 2"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers").map(function(w){return db.persons[w];}).item(), 
		[{fio:"Иванов И.И."}, {fio:"Петров П.П."}],
		"Error 3"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers")
			.map(function(w){return db.persons[w];})
			.filter("w|w.fio.match(/тро/)")
			.item(), 
		[{fio:"Петров П.П."}],
		"Error 4"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers")
			.map(function(w){return db.persons[w];})
			.first()
			.item(), 
		{fio:"Иванов И.И."},
		"Error 5"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers")
			.map(function(w){return db.persons[w];})
			.last()
			.item(), 
		{fio:"Петров П.П."},
		"Error 6"
	);
	
	this.assert(
		$C(db).path("organizations/MosBrick/workers")
			.map(function(w){return db.persons[w];})
			.find("w|w.fio.match(/тро/)")
			.path("fio")
			.item(), 
		"Петров П.П.",
		"Error 7"
	);
	
}}

new JSUnit.Test("Join 1", "Data conversion").run = function(){with(jColl){
	var db = {
		organizations:{
			MosBrick:{name:"ОАО Московский кирпич", address:"112332, Москва, Силикатный пр-д, д.2а",
				workers:["iiivanov", "pppetrov"]
			},
			Nauka:{name:"Издательский дом \"Строитель\"", address:"113235, Москва, Ленинский пр-т, д.99",
				workers:["sssidorov"]
			}
		},
		persons:{
			iiivanov:{fio:"Иванов И.И."},
			pppetrov:{fio:"Петров П.П."},
			sssidorov:{fio:"Сидоров С.С."}
		}
	};
	
	this.assert(
		$C(db).path("persons")
			.map("p,id|{id:id, fio:p.fio}")
			.join(
				$C(db).path("organizations"), 
				function(pers, org){
					return $C(org.workers)
						.find(function(w){return w==pers.id;})
						.map(function(){return {fio:pers.fio, org:org.name}});
				}
			)
			.item(),
		[
			{fio:"Иванов И.И.", org:"ОАО Московский кирпич"},
			{fio:"Петров П.П.", org:"ОАО Московский кирпич"},
			{fio:"Сидоров С.С.", org:"Издательский дом \"Строитель\""}
		],
		"Error 1"
	);
	
	// this.assert(
	// 	$C(db).path("persons")
	// 		.map(function(w, id){
	// 			var org = $C(db).path("organizations").find(function(o){
	// 				return $C(o.workers).find(function(wid){return wid==id}).length;
	// 			}).item();
	// 			return {fio:w.fio, org:org.name};
	// 		})
	// 		.item(),
	// 	[
	// 		{fio:"Иванов И.И.", org:"ОАО Московский кирпич"},
	// 		{fio:"Петров П.П.", org:"ОАО Московский кирпич"},
	// 		{fio:"Сидоров С.С.", org:"Издательский дом \"Строитель\""}
	// 	],
	// 	"Error 1"
	// );
}}


function init(){
	document.getElementById("versionPanel").innerHTML = jColl.version;
	JSUnit.init();
}
</script>
</head>
<body onload="init()">
	<h1>jColl Unit Tests</h1>
	<p>jColl v.<span id="versionPanel"></span></p>
	<div id="testContainer" style="display:none;"></div>
	<div id="out"></div>
</body>
</html>