<html>
<head>
<title>JsPath Unit Tests</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> 
<script type="text/javascript" src="../tools/jsUnit.js"></script>
<script type="text/javascript" src="jspath.js"></script>
<script type="text/javascript">
new JSUnit.Test("Подключение модуля JsPath", "Configuration").run = function(){
	this.assert(typeof(JsPath), "object");
}

new JSUnit.Test("Путь в виде строки", "Attribute access").run = function(){with(JsPath){
	var obj = {};
	set(obj, "abc", 1);
	this.assert(obj.abc, 1, "Error 1");
	set(obj, "def/ghi", 11);
	this.assert(obj.def.ghi, 11, "Error 2");
	
	set(obj, "x/#0", "xx");
	set(obj, "x/#1", "abc");
	this.assert(obj.x, ["xx","abc"], "Error 3");
	
	this.assert(obj, {abc:1, def:{ghi:11}, x:["xx", "abc"]}, "Error 4.1");
	this.assert(obj.x.constructor, Array, "Error 4.2");
	this.assert(obj.x.length, 2, "Error 4.3");
	
	this.assert(get(obj, "abc"), 1, "Error 5.1");
	this.assert(get(obj, "def/ghi"), 11, "Error 5.2");
	this.assert(get(obj, "x/#0"), "xx", "Error 5.3");
	this.assert(get(obj, "x/#1"), "abc", "Error 5.4");
}}

new JSUnit.Test("Путь в виде массива", "Attribute access").run = function(){with(JsPath){
	var obj = {};
	set(obj, ["abc"], 1);
	this.assert(obj.abc, 1, "Error 1");
	set(obj, ["def", "ghi"], 11);
	this.assert(obj.def.ghi, 11, "Error 2");
	
	set(obj, ["x", 0], "xx"); // если шаг задан в виде числа, то он обозначает индекс элемента массива
	set(obj, ["x", 1], "abc");
	this.assert(obj.x, ["xx","abc"], "Error 3");
}}

new JSUnit.Test("Комбинированное представление пути", "Attribute access").run = function(){with(JsPath){
	var obj = {};
	set(obj, ["abc/def", "x", 0], 1);
	set(obj, ["abc/def", "x", 1], 2);
	this.assert({abc:{def:{x:[1,2]}}}, obj, "Error 1");
	this.assert(get(obj, ["abc/def", "x", 1]), 2, "Error 2");
	this.assert(get(obj, ["abc", ["def", "x"], 1]), 2, "Error 2");	
}}

new JSUnit.Test("Попытка обращения к несуществующим данным", "Attribute access").run = function(){with(JsPath){
	var obj = {};
	set(obj, ["abc/def", "x", 0], 1);
	this.assert(get(obj, ["abc/def", "x", 5]), null, "Error 1");
	this.assert(get(obj, ["abc/def", "xww", 5]), null, "Error 2");
	this.assert(get(obj, ["abc/www", "xww", 5]), null, "Error 3");
}}

new JSUnit.Test("Delete Array element", "Element operations").run = function(){with(JsPath){
	var obj = {
		a:{
			b:{
				c:[1,2,3]
			}
		}
	};
	this.assert(get(obj, "a/b/c/#1"), 2, "Error 1");
	delItem(obj, "a/b/c/#1");
	this.assert(get(obj, "a/b/c/#1"), 3, "Error 2");
	this.assert(obj, {a:{b:{c:[1,3]}}});
}}

new JSUnit.Test("Move Array element", "Element operations").run = function(){with(JsPath){
	var obj = {
		a:{
			b:{
				c:[1,2,3,4,5]
			}
		}
	};
	this.assert(obj, {a:{b:{c:[1,2,3,4,5]}}}, "Error 1");
	moveDown(obj, "a/b/c/#1");
	this.assert(obj, {a:{b:{c:[1,3,2,4,5]}}}, "Error 2");
	moveUp(obj, "a/b/c/#1");
	this.assert(obj, {a:{b:{c:[3,1,2,4,5]}}}, "Error 3");
}}

new JSUnit.Test("Delete Object attribute", "Element operations").run = function(){with(JsPath){
	var obj = {
		a:{
			b:{
				c:1,
				d:2,
				e:3
			}
		}
	};
	this.assert(get(obj, "a/b/d"), 2, "Error 1");
	delItem(obj, "a/b/d");
	this.assert(obj, {a:{b:{c:1, e:3}}});
}}

new JSUnit.Test("Add Array Element", "Element operations").run = function(){with(JsPath){
	var arr = [];
	set(arr, "1", 5); this.assert(arr, [null, 5]);
	set(arr, "2", 6); this.assert(arr, [null, 5, 6]);
	set(arr, "0", 2); this.assert(arr, [2, 5, 6]);
	
	arr = [];
	set(arr, "3", 5); this.assert(arr, [null, null, null, 5]);
	
	var obj = {arr:[]};
	set(obj, "arr/1", 5); this.assert(obj, {arr:[null, 5]});
	set(obj, "arr/2", 6); this.assert(obj, {arr:[null, 5, 6]});
	set(obj, "arr/5", 7); this.assert(obj, {arr:[null, 5, 6, null, null, 7]});
	set(obj, "arr/0", 2); this.assert(obj, {arr:[2, 5, 6, null, null, 7]});
	
	
}}

new JSUnit.Test("OnChange Event", "Events").run = function(){with(JsPath){
	var obj = {x:{y:10, z:1}};
	var hndIdx = JsPath.onchange.bind("x/y", function(){
		JsPath.set(obj, "x/z", 2);
	});
	JsPath.set(obj, "x/y", 11);
	this.assert(obj, {x:{y:11,z:2}});
	
	JsPath.set(obj, "x/z", 1);
	JsPath.onchange.unbind(hndIdx);
	JsPath.set(obj, "x/y", 12);
	this.assert(obj, {x:{y:12,z:1}});
}}

new JSUnit.Test("OnMove Event", "Events").run = function(){with(JsPath){
	var obj = {
		x:[1,2,3,4]
	};
	var hndIdx = JsPath.onmove.bind("x/*", function(){
		JsPath.set(obj, "y", 2);
	});
	JsPath.moveUp(obj, "x/1");
	this.assert(obj, {x:[2,1,3,4], y:2});
	
	JsPath.set(obj, "y", 1);
	JsPath.onmove.unbind(hndIdx);
	JsPath.moveUp(obj, "x/1");
	this.assert(obj, {x:[1,2,3,4], y:1});
}}

new JSUnit.Test("OnRemove Event", "Events").run = function(){with(JsPath){
	var obj = {
		x:[1,2,3,4]
	};
	var hndIdx = JsPath.onremove.bind("x/*", function(){
		JsPath.set(obj, "y", 2);
	});
	JsPath.remove(obj, "x/1");
	this.assert(obj, {x:[1,3,4], y:2});
	
	JsPath.set(obj, "y", 1);
	JsPath.onremove.unbind(hndIdx);
	JsPath.remove(obj, "x/1");
	this.assert(obj, {x:[1,4], y:1});
}}

function init(){
	document.getElementById("versionPanel").innerHTML = JsPath.version;
	JSUnit.init();
}
</script>
</head>
<body onload="init()">
	<h1>JsPath Unit Tests</h1>
	<p style="border: 1px solid black; padding:5px; margin:10px;">Модуль JsPath обеспечивает XPath-образную навигацию по JSON-структурам, а также простейшие операции над ее элементами. Путь можно задавать как в виде строки, так и в виде массива шагов (возможен также и комбинированный вариант).</p>
	<p>JsPath v.<span id="versionPanel"></span></p>
	<div id="testContainer" style="display:none;"></div>
	<div id="out"></div>
</body>
</html>