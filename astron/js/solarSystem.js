(function($){	$.fn.solarSystem = function(options){		var state = this.data("settings");		if(state) options = $.extend(state, options);				var defaults = {			margin: 10		};		var opt = $.extend(true, defaults, options);				if(!opt.today) opt.today = new Date();				var center = {x:opt.w/2, y:opt.h/2};				/* 	idx - порядковый номер объекта			d - диаметр объекта для отображения(px)			siderT - сидерический год (в земных сутках)			ra - радиус орбиты в афелии (а.е.)			opposition - дата ближайшего противостояния (верхнего соединения для нижних планет)		*/		var objects = {			Sun:{idx:0, color:"#ffc", d:10},			Mercury:{idx:1, color:"#fff", d:3, siderT:87.97, ra:0.47, opposition:new Date(2012,10,16)},			Venus:{idx:2, color:"#eef", d:5, siderT:224.70, ra:0.73, opposition:new Date(2012,5,4)},			Earth:{idx:3, color:"#ccf", d:5, siderT:365.26, ra:1.02},			Mars:{idx:4, color:"#fcc", d:4, siderT:686.98, ra:1.67, opposition:new Date(2012,2,3)},			Jupiter:{idx:5, color:"#fee", d:8, siderT:4332.59, ra:5.46, opposition:new Date(2012,11,3)},			Saturn:{idx:6, color:"#ccc", d:7, siderT:10759.22, ra:10.12, opposition:new Date(2012,3,15)},			Uranus:{idx:7, color:"#ccc", d:6, siderT:30799.1, ra:20.08, opposition:new Date(2012,8,29)},			Neptune:{idx:8, color:"#ccf", d:6, siderT:60190, ra:30.44, opposition:new Date(2012,7,24)}			//Pluto:{idx:9, color:"#ccc", d:3, siderT:90613.31, ra:39.48}		};		$.extend(true, objects, opt.objects);				var orbitCount = -1;		for(var k in objects) orbitCount++;				function daysInterval(date1, date2){			return (date2-date1)/(1000*60*60*24);		}				function dayOfYear(date){			var newYr = new Date(1900+date.getYear(), 0, 1)			return daysInterval(newYr, date);		}				function earthEclipticLongitude(date){			date = date || opt.today;			return dayOfYear(date)*-360/objects.Earth.siderT;		}						function eclipticLongitude(planetName){ //Эклиптическая гелиоцентрическая долгота			if(planetName=="Sun") return 0;			var planet = objects[planetName];			if(planetName=="Earth") return earthEclipticLongitude();			var oppDays = daysInterval(planet.opposition, opt.today);			var dPh = oppDays*-360/planet.siderT;			return dPh + earthEclipticLongitude(planet.opposition);		}						function Planet(P, nm){			var orbitStep = (Math.min(opt.h, opt.w)/2 - opt.margin)/orbitCount;			var orbitR = orbitStep*objects[nm].idx;			P.circle(center.x, center.y, orbitR).attr({"stroke-width":1, stroke:opt.color.fore, opacity:.7});			return P.circle(center.x, center.y - orbitR, objects[nm].d)				.attr({fill:objects[nm].color, "stroke-width":0, title:nm})				.transform(["R", eclipticLongitude(nm), center.x, center.y]);		}				function buildScreen(pnl){			var P = new Raphael(pnl, opt.w, opt.h);			var body = P.rect(0, 0, opt.w, opt.h)				.attr({fill:opt.color.back});							var planets = {};							for(var k in objects){				planets[k] = Planet(P, k);			}						var captured;			var capturedColor;			function releaseCaptured(){				if(!captured) return;				captured.attr({fill:capturedColor});				captured = null;			}			body.mouseup(releaseCaptured);			var bodyPos = {x:body.attr("x"), y:body.attr("y")};						function length(dx, dy){return Math.sqrt(dx*dx + dy*dy);}						planets.Earth				.attr({cursor:"pointer"})				.drag(					function(dx, dy, x, y){						var r = {w:captured.attr("cx") - center.x, h:captured.attr("cy") - center.y};						var rLng = length(r.w, r.h);						var lng = length(dx, dy);						var angle = Math.atan(lng/rLng)*360/(2*Math.PI);						if(r.w>0&&r.h>0&&dx>0							|| r.w>0&&r.h<0&&dx<0							|| r.w<0&&r.h<0&&dx<0							|| r.w<0&&r.h>0&&dx>0						) angle = -angle;						captured.transform(["R", -angle, center.x, center.y]);					},					function(){						captured = this;						capturedColor = captured.attr("fill");						captured.attr({fill:"#f00"});					},					releaseCaptured				);			$(pnl).data("planets", planets)				.data("settings", $.extend(true,{},opt));		}				function modifyScreen(pnl){			var planets = $(pnl).data("planets");			$.each(planets, function(nm, planet){				planet.transform(["R", eclipticLongitude(nm), center.x, center.y]);			});		}				return this.each(function(i, itm){			if(!$(itm).data("planets")) buildScreen(itm);			else modifyScreen(itm);		});	};})(jQuery);