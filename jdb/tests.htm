<html>
<head>
<meta charset="windows-1251"/>
<title>JDB Unit Tests</title>
<script type="text/javascript" src="../tools/jsUnit.js"></script>
<script type="text/javascript" src="jdb.js"></script>
<script type="text/javascript">
new JSUnit.Test("Подключение модуля JDB", "Configuration").run = function(){
	this.assert(typeof(JDB), "function");
}

new JSUnit.Test("each", "Simple Non-monadic").run = function(){
	var coll = [1, 2, 3];
	var log = [];
	JDB.each(coll, function(e, i){log.push(i+":"+e);});
	this.assert(log, ["0:1", "1:2", "2:3"]);
}
new JSUnit.Test("extend", "Simple Non-monadic").run = function(){
	var coll = {
		1:"John",
		2:"Phill",
		3:"James"
	};
	JDB.extend(coll, {
		4:"George",
		5:"Paul"
	});
	this.assert(coll, {
		1:"John",
		2:"Phill",
		3:"James",
		4:"George",
		5:"Paul"
	});
}

new JSUnit.Test("raw", "Basic Monadic").run = function(){
	var coll = [1, 2, 3];
	var d = JDB(coll);
	this.assert(d.raw(), coll);
	this.assert(JDB(d).raw(), coll); // повторная обертка не приводит к ошибкам
}

new JSUnit.Test("map", "Basic Monadic").run = function(){
	this.assert(JDB([1, 2, 3]).map(function(x){return x*2;}).raw(), [2, 4, 6]);
	this.assert(JDB({x:1, y:2, z:3}).map(function(x){return x*2;}).raw(), {x:2, y:4, z:6});
}

new JSUnit.Test("each", "Basic Monadic").run = function(){
	var log = [];
	this.assert(JDB([1, 2, 3]).each(function(x){log.push(x);}).raw(), [1, 2, 3]);
	this.assert(log, [1, 2, 3]);
	log = [];
	this.assert(JDB({x:1, y:2, z:3}).each(function(x, n){log.push(n+":"+x);}).raw(), {x:1, y:2, z:3});
	this.assert(log, ["x:1", "y:2", "z:3"]);
}

new JSUnit.Test("select", "Basic Monadic").run = function(){
	this.assert(JDB([1, 2, 3]).select(function(x){return x<3;}).raw(), [1, 2]);
	this.assert(JDB({x:1, y:2, z:3}).select(function(x){return x<3;}).raw(), {x:1, y:2});
}

new JSUnit.Test("index", "Basic Monadic").run = function(){
	var coll = [
		{id:1, nm:"John"},
		{id:2, nm:"Phill"},
		{id:3, nm:"James"}
	];
	this.assert(JDB(coll).index("id").raw(), {
		1:{id:1, nm:"John"},
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	});
	this.assert(JDB(coll).index(function(e){return e.id;}).raw(), {
		1:{id:1, nm:"John"},
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	});
}
new JSUnit.Test("groupBy", "Basic Monadic").run = function(){
	var coll = [
		{salary:100, nm:"John"},
		{salary:200, nm:"Phill"},
		{salary:100, nm:"James"}
	];
	this.assert(JDB(coll).groupBy("salary").raw(), {
		100:[
			{salary:100, nm:"John"},
			{salary:100, nm:"James"}
		],
		200:[{salary:200, nm:"Phill"}],
	});
	this.assert(JDB(coll).groupBy(function(e){return e.salary;}).raw(), {
		100:[
			{salary:100, nm:"John"},
			{salary:100, nm:"James"}
		],
		200:[{salary:200, nm:"Phill"}],
	});
}

new JSUnit.Test("extend", "Basic Monadic").run = function(){
	var coll = {
		1:{id:1, nm:"John"}
	};
	this.assert(JDB(coll).extend({
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	}).raw(), {
		1:{id:1, nm:"John"},
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	});
	this.assert(JDB(coll).extend(JDB({
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	})).raw(), {
		1:{id:1, nm:"John"},
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	});
}

new JSUnit.Test("concat", "Basic Monadic").run = function(){
	var coll = [1, 2, 3];
	this.assert(JDB(coll).concat([4, 5]).raw(), [1, 2, 3, 4, 5]);
	this.assert(JDB(coll).concat(JDB([4, 5])).raw(), [1, 2, 3, 4, 5]);
}

new JSUnit.Test("toArray", "Basic Monadic").run = function(){
	this.assert(JDB({
		1:{id:1, nm:"John"},
		2:{id:2, nm:"Phill"},
		3:{id:3, nm:"James"}
	}).toArray().raw(), [
		{id:1, nm:"John"},
		{id:2, nm:"Phill"},
		{id:3, nm:"James"}
	]);

	this.assert(JDB({
		1:{nm:"John"},
		2:{nm:"Phill"},
		3:{nm:"James"}
	}).toArray(function(e, k){e.id = +k; return e;}).raw(), [
		{id:1, nm:"John"},
		{id:2, nm:"Phill"},
		{id:3, nm:"James"}
	]);
}

new JSUnit.Test("treeToArray", "Basic Monadic").run = function(){
	var tree = {nm:"library", children:[
		{nm:"scifi", children:[
		]},
		{nm:"classics", children:[
			{nm:"russian", children:[
				{nm:"Pushkin"},
				{nm:"Tolstoy"}
			]}
		]}
	]};
	this.assert(JDB(tree).treeToArray("children", function(e){return e.nm;}).raw(), [
		"library", "scifi", "classics", "russian", "Pushkin", "Tolstoy"
	]);
	this.assert(JDB(tree).treeToArray("children", "nm").raw(), [
		"library", "scifi", "classics", "russian", "Pushkin", "Tolstoy"
	]);
}

new JSUnit.Test("sort", "Basic Monadic").run = function(){
	var coll = [1, 5, 3];
	this.assert(JDB(coll).sort().raw(), [1, 3, 5]);
	coll = [
		{salary:100, nm:"John"},
		{salary:200, nm:"Phill"},
		{salary:80, nm:"James"}
	];
	this.assert(JDB(coll).sort(function(a,b){return a.salary>b.salary?1:a.salary<b.salary?-1:0;}).raw(), [
		{salary:80, nm:"James"},
		{salary:100, nm:"John"},
		{salary:200, nm:"Phill"}
	]);
	this.assert(JDB(coll).sort("salary").raw(), [
		{salary:80, nm:"James"},
		{salary:100, nm:"John"},
		{salary:200, nm:"Phill"}
	]);
}

new JSUnit.Test("reverse", "Basic Monadic").run = function(){
	var coll = [1, 2, 3, 4];
	this.assert(JDB(coll).reverse().raw(), [4, 3, 2, 1]);
}

function init(){
	document.getElementById("versionPanel").innerHTML = JDB.version;
	JSUnit.init();
}
</script>
</head>
<body onload="init()">
	<h1>JDB Unit Tests</h1>
	<p>JDB - модуль для операций над коллекциями в формате JSON</p>
	<p>JDB v.<span id="versionPanel"></span></p>
	<div id="testContainer" style="display:none;"></div>
	<div id="out"></div>
</body>
</html>