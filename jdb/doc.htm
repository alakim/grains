<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8"/>
	<script type="text/javascript" src="lib/html.js"></script>
	<script type="text/javascript" src="lib/jquery-1.11.0.min.js"></script>
	<script type="text/javascript" src="jdb.js"></script>
	<script type="text/javascript">
		var px = Html.unit("px");
		Html.writeStylesheet({
			body:{
				"font-family":"Verdana, Arial, Sans-Serif",
				"font-size":px(14),
				" .propList":{
					"text-indent":px(0),
					padding:px(0, 0, 0, 20),
					" .type":{"font-style":"italic"},
					" .name":{
						"font-weight":"bold"
					},
					" p":{margin:0, padding:0, "text-indent":px(20)},
					" ol":{padding:px(0, 0, 0, 35)}
				},
				" span.code":{
					"font-family":"Courier New, Monospace",
					background:"#fff",
					padding:px(2)
				}
			}
		});
		$(function(){
			function lambdaAvailable(){with(Html){
				return p("Функция может быть задана ",  a({href:"#lambda"}, "лямбда-выражением"), ".");
			}}
			function code(cc){with(Html){
				return span({"class":"code"}, cc);
			}}
			function param(nm, dsc){with(Html){
				return li(span({"class":"name"}, nm), " - ", dsc)
			}}
			var common = {
				each: function(){with(Html){
					return markup(", получающую следующие параметры: " + ol(
						param("val", "значение элемента структуры"),
						param("key", "ключ данного элемента"),
						param("i", "номер итерации при обходе элементов (если структура является массивом, этот номер совпадает со значением ключа)")
					) + lambdaAvailable());
				}},
				map: function(){with(Html){
					return markup(p("В функцию F передаются следующие параметры:") + ol(
						param("val", "значение элемента структуры"),
						param("key", "ключ данного элемента")
					) + lambdaAvailable());
				}}
			};
			$("body").html((function(){with(Html){
				return div(
					h1("Руководство по использованию скриптового модуля JDB"),
					p("Библиотека JDB (JSON Data Base) предназначена для выполнения операций поиска, сортировки, и различных преобразований над структурами данных в формате JSON."),
					p("Текущая версия библиотеки JDB v.", JDB.version),
					p("Основные свойства и методы: "),
					ul({"class":"propList"},
						apply(JDB, function(m, nm){
							return li(
								span({"class":"type"}, typeof(m)), " ",
								span({"class":"name"}, nm),
								{
									version:" - текущий номер версии",
									extend:"(o, s, deep) - копирует свойства структуры s в объект o. Если указан "+code("deep=true")+" (по умолчанию "+code("false")+"), то производится глубокое копирование",
									each:"(coll, F) - для каждого элемента первого уровня структуры данных "+code("coll")+" вызывает функцию "+code("F")+common.each(),
									map:"(coll, F) - модифицирует все элементы первого уровня структуры данных "+code("coll")+", применяя к ним функцию F."+common.map(),
									select:"(coll, F) - выбирает из первого уровня структуры данных "+code("coll")+" элементы, отвечающие условию, задаваемому функцией "+code("F")+"."+lambdaAvailable(),
									first:"(coll) - возвращает коллекцию, содержащую первый элемент верхнего уровня исходной структуры данных "+code("coll")+". "+ lambdaAvailable(),
									flat:"(coll) - преобразует структуру "+code("coll")+" вида \"массив массивов\" в \"плоский\" массив. "+ lambdaAvailable(),
									page:"(coll, size, nr) - постраничное отображение массива "+code("coll")+". Возвращает страницу размером "+code("size")+", заданную номером "+code("nr")+". "+ lambdaAvailable(),
									index:"(coll, cond, constr) - формирует индекс элементов исходной структуры данных. Параметры: "+ol(
										param("coll", "исходная структура данных"),
										param("cond", "условие индексирования - имя поля, по которому производится индексирование, или функция, возвращающая индексируемое значение"),
										param("constr", "необязательный конструктор элемента индекса. Если задан, преобразует элемент данных исходной структуры в элемент индекса.")
									)+ lambdaAvailable()
								}[nm]
							);
						})
					),
					p("Библиотека допускает работу в монадном стиле. Для этого следует обернуть исходную JSON-структуру функцией ", code("JDB"),", например: ", code("JDB({x:1, y:2, name:\"item#2\"})"),", в результате чего получим объект (\"монаду\"), имеющий следующие методы, каждый из которых возвращает объект, являющийся оберткой новой структуры данных, имеющей тот же самый набор методов. В результате, над исходной структурой данных можно производить последовательные действия, например: ", code("JDB([{x:1}, {x:3}]).select(\"x|x<2\").map(\"x|x*10\").raw()"), ", в результате чего получим массив ", code("[{x:10}]"),"."),
					p("Доступные методы:"),
					ul({"class":"propList"},
						apply(JDB([]), function(m, nm){
							return li(
								span({"class":"type"}, typeof(m)), " ",
								span({"class":"name"}, nm),
								{
									raw:"() - возвращает структуру данных без обертки (вызов этого метода завершает работу в монадном стиле)",
									trace:"(msg) - трассировка, выводит текущее значение структуры данных на консоль, сопровождая сообщением msg (если указано)",
									map:"(F) - модифицирует все элементы первого уровня структуры данных, применяя к ним функцию F."+common.map(),
									each:"(F) - для каждого элемента первого уровня структуры данных вызывает функцию "+code("F")+common.each(),
									select:"(F) - выбирает из первого уровня структуры данных элементы, отвечающие условию, задаваемому функцией "+code("F")+". "+lambdaAvailable(),
									first:"() - возвращает коллекцию, содержащую первый элемент верхнего уровня исходной структуры данных. "+ lambdaAvailable(),
									flat:"() - преобразует структуру вида \"массив массивов\" в \"плоский\" массив. "+ lambdaAvailable(),
									page:"(size, nr) - постраничное отображение массива. Возвращает страницу размером "+code("size")+", заданную номером "+code("nr")+". "+ lambdaAvailable(),
									index:"(cond, constr) - формирует индекс элементов исходной структуры данных. Параметры: "+ol(
										param("cond", "условие индексирования - имя поля, по которому производится индексирование, или функция, возвращающая индексируемое значение"),
										param("constr", "необязательный конструктор элемента индекса. Если задан, преобразует элемент данных исходной структуры в элемент индекса.")
									)+ lambdaAvailable()
								}[nm]
							);
						})
					),
					div(
						a({name:"lambda"}),
						h2("Использование лямбда-выражений")
					)
				);
			}})());
		});
	</script>
</head>
<body>
</body>
</html> 
