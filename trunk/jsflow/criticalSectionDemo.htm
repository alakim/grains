<html>
<head>
<title>JSFlow Critical Section sample</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<script type="text/javascript" src="../html/html.js"></script>
<script type="text/javascript" src="jsflow.js"></script>
<script type="text/javascript">

function $(id){return document.getElementById(id);}

var log = [];

with(JSFlow){
	
	// Процесс определяем в виде функции, возвращающей исполняемый экземпляр процесса.
	// При каждом запуске создается новый экземпляр.
	var process = function(){
		return sequence(
			function(){
				var go = new Continuation();
				log = [];
				go();
			},
			
			parallel(
				sequence(
					wait(100),
					cSection()
				),
				
				sequence(
					wait(130),
					cSection()
				)
			),
			
			function(){with(Html){
				var expectation = "01234567890123456789";
				var res = log.join("");
				$("out").innerHTML = res==expectation?span({style:"color:#008800;"}, "OK"):span(
					span({style:"color:#ff0000;"}, "Failure "),
					br(),
					" Expected ", expectation,
					", but result is ", res
				);
			}}
		);
	};
	
	function Queue(){
		this.items = [];
	}
	
	Queue.prototype = {
		add: function(itm){var _=this;
			_.items[_.items.length] = itm;
		},
		
		extractFirst: function(){var _=this;
			var f = _.items[0];
			_.items = _.items.splice(1, _.items.length-1);
			return f;
		},
		
		getFirst: function(){var _=this;
			return _.items[0];
		},
		
		getLength: function(){
			return this.items.length;
		}
	};
	
	var queue = new Queue();
	var busy = false;
	
	var cSection = function(){
		return sequence(
			function(){
				var go = new Continuation();
				if(busy)
					queue.add(go);
				else {
					busy = true;
					go();
				}
			},
			times(10, 10, function(i){
				log.push(i);
			}),
			function(){
				var next = new Continuation();
				var go = queue.extractFirst();
				if(go) go(); else busy = false;
				next();
			}
		);
	};
}

function runProcess(){
	$("out").innerHTML = "";
	process().run();
}

</script>
</head>
<body>
	<h1>JSFlow Critical Section sample</h1>
	<button onclick="runProcess()">Run Process</button><br><br><br>
	<div id="out">
</body>
</html>