(function($, H){	var rowHeight = 30,		borderWidth = 1,		defaultColumnWidth = 80;		var borderStyle = borderWidth+"px solid #ccc"		var templates = {		table: function(tree){with(H){			return markup(				apply(tree.levels, function(lvl, i){					return span(lvl, "*");				}),				templates.subtable(tree.root)			);		}},		subtable: function(node, levelNr, prevHeight, prevCellHeight){with(H){			levelNr = levelNr || 0;			prevHeight = prevHeight || 0;			prevCellHeight = prevCellHeight || 0;			tblHeight = rowHeight*node.rowCount;						return markup(				div({style:style({						position: "relative",						border: borderStyle,						width: defaultColumnWidth,						height: tblHeight-borderWidth,						left: levelNr*(defaultColumnWidth+borderWidth),						top: -prevCellHeight					})},					node.title, " rowCount:", node.rowCount				),				node.branches?apply(node.branches, function(brNode, i){					var rowCount = brNode.rowCount;					return markup(						templates.subtable(brNode, levelNr+1, tblHeight, 							//prevCellHeight+tblHeight+borderWidth							prevCellHeight+tblHeight+borderWidth+i*rowHeight						)					)				}):null			);		}}	};		function buildTable(el, tree){		el.html(templates.table(tree));	}		function calcRows(level){		if(!level.branches) {level.rowCount = 1; return 1;}		var count = 0;		$.each(level.branches, function(i, br){			count+=calcRows(br);		});		level.rowCount = count;		return count;	}		$.fn.treeTable = function(tree){		calcRows(tree.root);		//console.log(tree.root);		$(this).each(function(i, el){			buildTable($(el), tree);		});	};})(jQuery, Html);