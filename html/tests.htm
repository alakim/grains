<html>
<head>
<title>Html Unit Tests</title>
<script type="text/javascript" src="../tools/jsUnit.js"></script>
<script type="text/javascript" src="html.js"></script>
<script type="text/javascript">
new JSUnit.Test("Подключение модуля Html", "Configuration").run = function(){
	this.assert(typeof(Html), "object");
}

new JSUnit.Test("compareVersions", "Configuration").run = function(){
	this.assert(Html.compareVersions("1.2.3", "1.2.3"), 0);
	this.assert(Html.compareVersions("2.2.3", "1.2.3"), 1);
	this.assert(Html.compareVersions("1.2.3", "2.2.3"), -1);
	this.assert(Html.compareVersions("1.3.3", "1.2.3"), 1);
	this.assert(Html.compareVersions("1.2.3", "1.3.3"), -1);
	this.assert(Html.compareVersions("1.2.4", "1.2.3"), 1);
	this.assert(Html.compareVersions("1.2.3", "1.2.4"), -1);
	            
	this.assert(Html.compareVersions("2.0.9", "2.0.9"), 0);
	this.assert(Html.compareVersions("2.0.10", "2.0.10"), 0);
	            
	this.assert(Html.compareVersions("2.0.10", "2.0.9"), 1, "Err 1");
	this.assert(Html.compareVersions("2.0.9", "2.0.10"), -1, "Err 2");
}

new JSUnit.Test("Простая верстка", "Верстка").run = function(){
	with(Html){
		this.assert(
			div(
				p("abc"),
				p("def")
			),
			"<div><p>abc</p><p>def</p></div>"
		);
	}
}

new JSUnit.Test("Простая верстка с атрибутами", "Верстка").run = function(){
	with(Html){
		this.assert(
			div({
					"class":"panel",
					width:200
				},
				p("abc")
			),
			"<div class=\"panel\" width=\"200\"><p>abc</p></div>"
		);
	}
}

new JSUnit.Test("Простая таблица", "Верстка").run = function(){
	with(Html){
		this.assert(
			table({border:0, cellpadding:0, cellspacing:0},
				tr(td("11"), td("12")),
				tr(td("21"), td("22"))
			),
			"<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tr><td>11</td><td>12</td></tr><tr><td>21</td><td>22</td></tr></table>"
		);
	}
}

new JSUnit.Test("Таблица с пустыми ячейками", "Верстка").run = function(){
	with(Html){
		this.assert(
			table(
				tr(th("ss"), th("  ")),
				tr(td("11"), td("   ")),
				tr(td(), td("22"))
			),
			"<table><tr><th>ss</th><th>&nbsp;</th></tr><tr><td>11</td><td>&nbsp;</td></tr><tr><td>&nbsp;</td><td>22</td></tr></table>"
		)
	}
}

new JSUnit.Test("Картинки", "Верстка").run = function(){
	with(Html){
		this.assert(
			div(
				hr(),
				img({src:"null.gif", width:"10px"}),
				br(),
				p("abc")
			),
			"<div><hr/><img src=\"null.gif\" width=\"10px\"/><br/><p>abc</p></div>"
		);
	}
}

new JSUnit.Test("tagCollection", "Верстка").run = function(){
	with(Html){
		this.assert(
			tagCollection(
				div("abc"),
				"def",
				div("ghi")
			),
			"<div>abc</div>def<div>ghi</div>"
		);
	}
}
new JSUnit.Test("Arbitrary Attributes", "Верстка").run = function(){
	with(Html){
		var b = true;
		this.assert(
			div({width:4},
				b?{height:5}:null,
				!b?{"z-index":3}:null,
				"xxx"
			),
			"<div width=\"4\" height=\"5\">xxx</div>"
		);
	}
}
new JSUnit.Test("Таблица", "Шаблоны").run = function(){
	with(Html){
		var data = [{nm:"abc", nr:1}, {nm:"def", nr:2}];
		this.assert(
			table(
				apply(data, function(el){
					return tr(td(el.nm), td(el.nr))
				})
			),
			"<table><tr><td>abc</td><td>1</td></tr><tr><td>def</td><td>2</td></tr></table>"
		);
	}
}

new JSUnit.Test("Таблица с раскрашенными строками", "Шаблоны").run = function(){
	with(Html){
		var data = [{nm:"abc", nr:1}, {nm:"def", nr:2}, {nm:"ghi", nr:3}];
		this.assert(
			table(
				apply(data, function(el, i){
					return tr(i%2?null:{"class":"even"},
						td(el.nm), td(el.nr)
					)
				})
			),
			"<table><tr class=\"even\"><td>abc</td><td>1</td></tr><tr><td>def</td><td>2</td></tr><tr class=\"even\"><td>ghi</td><td>3</td></tr></table>"
		);
	}
}

new JSUnit.Test("Таблица с заголовком", "Шаблоны").run = function(){
	with(Html){
		var data = [{nm:"abc", nr:1}, {nm:"def", nr:2}];
		this.assert(
			table({border:0, cellpadding:3, cellspacing:0},
				tr(th("Name"), th("Number")),
				apply(data, function(el){
					return tr(td(el.nm), td(el.nr))
				})
			),
			"<table border=\"0\" cellpadding=\"3\" cellspacing=\"0\"><tr><th>Name</th><th>Number</th></tr><tr><td>abc</td><td>1</td></tr><tr><td>def</td><td>2</td></tr></table>"
		);
	}
}
new JSUnit.Test("Таблица с источником данных в структуре", "Шаблоны").run = function(){
	with(Html){
		var data = {
			"John":22,
			"Phill":33,
			"George":44
		};
		this.assert(
			table(
				apply(data, function(val, nm){
					return tr(
						td(nm),
						td(val)
					);
				})
			),
			"<table><tr><td>John</td><td>22</td></tr><tr><td>Phill</td><td>33</td></tr><tr><td>George</td><td>44</td></tr></table>"
		);
	}
}

new JSUnit.Test("Нумерация", "Шаблоны").run = function(){
	with(Html){
		var data = [{nm:"abc", nr:1}, {nm:"def", nr:2}];
		this.assert(
			div(
				apply(data, function(el, i){
					return p((i+1)+". "+el.nm);
				})
			),
			"<div><p>1. abc</p><p>2. def</p></div>"
		)
	}
}

new JSUnit.Test("Нумерация с разделителем", "Шаблоны").run = function(){
	with(Html){
		var data = [{nm:"abc", nr:1}, {nm:"def", nr:2}];
		this.assert(
			div(
				apply(data, function(el, i){
					return span((i+1)+". "+el.nm);
				}, ", ")
			),
			"<div><span>1. abc</span>, <span>2. def</span></div>"
		)
	}
}

new JSUnit.Test("Нумерация с разделителем 2", "Шаблоны").run = function(){
	with(Html){
		var data = [1, 2, null, 3, ""];
		this.assert(
			div(
				apply(data, function(el, i){
					if(el==3) return null;
					return span(el);
				}, ", ", true)
			),
			"<div><span>1</span>, <span>2</span></div>",
			"Error 1"
		)
		this.assert(
			div(
				apply(data, function(el, i){
					if(el==3) return null;
					return span(el);
				}, ", ", false)
			),
			"<div><span>1</span>, <span>2</span>, <span></span>, , <span></span></div>",
			"Error 2"
		)
	}
}

new JSUnit.Test("Итерация 1", "Шаблоны").run = function(){
	with(Html){
		this.assert(
			div(
				times(2, function(i){
					return span(i);
				})
			),
			"<div><span>1</span><span>2</span></div>"
		);
	}
}

new JSUnit.Test("Итерация 2", "Шаблоны").run = function(){
	with(Html){
		this.assert(
			div(
				p("xyz"),
				times(2, function(i){
					return span(i);
				}),
				p("abc")
			),
			"<div><p>xyz</p><span>1</span><span>2</span><p>abc</p></div>"
		);
	}
}

new JSUnit.Test("Итерация с разделителем", "Шаблоны").run = function(){
	with(Html){
		this.assert(
			div(
				times(2, function(i){
					return span(i);
				}, ", ")
			),
			"<div><span>1</span>, <span>2</span></div>"
		);
	}
}

new JSUnit.Test("format function", "Formatting").run = function(){ with(Html){
	this.assert(format("abc{0}def", 1), "abc1def");
	this.assert(format("abc '{0}' def", 1), "abc '1' def");
	this.assert(format("abc{0}def{1}xxx{2}yyy", 1, "abc", true), "abc1defabcxxxtrueyyy");
}}


new JSUnit.Test("callFunction function", "Formatting").run = function(){ with(Html){
	this.assert(callFunction("alert", 1), "alert(1)");
	this.assert(callFunction("alert", "abc"), "alert('abc')");
	this.assert(callFunction("alert", "ОАО \"Персей\""), "alert('ОАО \\\"Персей\\\"')");
	this.assert(callFunction("alert", true), "alert(true)");
	this.assert(callFunction("myFunction", 1, "abc", [1,2,3], {x:1, y:2, name:"abba"}), "myFunction(1,'abc',[1,2,3],{x:1,y:2,name:'abba'})");
	this.assert(callFunction("clickLink", 12, "@this"), "clickLink(12,this)");
	
}}

new JSUnit.Test("callFunction function 2", "Formatting").run = function(){ with(Html){
	var idx = 1;
	var id = 2;
	var name="ОАО \"Персей\"";
	this.assert(
		span({"class":"TEditLinkButton", onclick:callFunction("action", idx, id, name)}, name),
		"<span class=\"TEditLinkButton\" onclick=\"action(1,2,'ОАО \\\"Персей\\\"')\">ОАО \"Персей\"</span>"
	);
}}

new JSUnit.Test("JSON serialization", "Formatting").run = function(){ with(Html){
	this.assert(json(1), "1", "Error 1.1");
	this.assert(json(11), "11", "Error 1.2");
	
	this.assert(json(true), "true", "Error 2.1");
	this.assert(json(false), "false", "Error 2.2");
	
	this.assert(json(""), "''", "Error 3.1");
	this.assert(json("abc def"), "'abc def'", "Error 3.1");
	this.assert(json("1234"), "'1234'", "Error 3.1");
	
	this.assert(json(function(){}), "", "Error 4.1");
	
	this.assert(json([]), "[]", "Error 5.1");
	this.assert(Html.json([1]), "[1]", "Error 5.2");
	this.assert(json([1,2,"xx"]), "[1,2,'xx']", "Error 5.3");
	this.assert(json([1,2,{x:1,y:2}]), "[1,2,{x:1,y:2}]", "Error 5.4");
}}

new JSUnit.Test("Style attribute", "Formatting").run = function(){ with(Html){
	var style = Html.style({
		width:100,
		color:"#f00"
	});
	this.assert(style, "width:100px;color:#f00");
}}

new JSUnit.Test("Document type definition", "XML").run = function(){ with(Html){
	var xml = (function(){with(Html.getTagDefinitions("library;book")){
		return library(
			book({title:"Война и мир"}),
			book({title:"Капитанская дочка"})
		);
	}})();
	this.assert(xml, "<library><book title=\"Война и мир\"/><book title=\"Капитанская дочка\"/></library>");
}}
new JSUnit.Test("Document type definition 2", "XML").run = function(){ with(Html){
	var xml = (function(){with(Html.getTagDefinitions(["library", "book"])){
		return library(
			book({title:"Война и мир"}),
			book({title:"Капитанская дочка"})
		);
	}})();
	this.assert(xml, "<library><book title=\"Война и мир\"/><book title=\"Капитанская дочка\"/></library>");
}}
new JSUnit.Test("Tag Definitions", "Extensions").run = function(){ with(Html){
	Html.defineTags("ss;ssl");
	var html = (function(){with(Html){
		return ss(
			ssl("abc"),
			ssl("def"),
			p("ghi")
		);
	}})();
	this.assert(html, "<ss><ssl>abc</ssl><ssl>def</ssl><p>ghi</p></ss>");
}}
new JSUnit.Test("Tag Definitions 2", "Extensions").run = function(){ with(Html){
	Html.defineTags(["ss", "ssl", "_interface"]);
	var html = (function(){with(Html){
		return ss(
			ssl("abc"),
			ssl("def"),
			p("ghi"),
			_interface("zz")
		);
	}})();
	this.assert(html, "<ss><ssl>abc</ssl><ssl>def</ssl><p>ghi</p><interface>zz</interface></ss>");
}}


new JSUnit.Test("Stylesheet", "Extensions").run = function(){
	var sst = Html.stylesheet({
		"body":{
			"font-family":"Verdana",
			fontSize:"12px",
			" p":{
				margin:0
			}
		}
	});
	this.assert(sst, "body{\nfont-family : Verdana ;\nfont-size : 12px ;\n}\nbody p{\nmargin : 0 ;\n}");
}

new JSUnit.Test("Units", "Extensions").run = function(){
	var px = Html.unit("px");
	this.assert(px(22), "22px");
	this.assert(px(3, 5, 10), "3px 5px 10px");
	this.assert(Html.units.px(22), '22px');
	this.assert(Html.units.pc(100), '100%');
}

new JSUnit.Test("CSS Keywords", "Extensions").run = function(){
	this.assert(Html.cssKeywords.none, 'none');
	this.assert(Html.cssKeywords.absolute, 'absolute');
}

function init(){
	document.getElementById("versionPanel").innerHTML = Html.version();
	JSUnit.init();
}
</script>
</head>
<body onload="init()">
	<h1>Html Unit Tests</h1>
	<p>Html v.<span id="versionPanel"></span></p>
	<div id="testContainer" style="display:none;"></div>
	<div id="out"></div>
</body>
</html>